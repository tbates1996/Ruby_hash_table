Class Diagram

Struct Bucket
	(-)key, value
	(+)Bucket next
class LinkedList
	(-) Bucket head, tail, int count
	//Ruby generates getters with "attr_reader :head, :tail:, :count"
	//however data is still private 
	(+) Bucket head()
	(+) Bucket tail()
	(+) int count()
	(+)initialize()
	(+)void purge()
	(+)boolean empty?()
	(+)Bucket first()
	(+)void append(key,value)
	(+)each(&block) //This is Ruby convention for iterator service. 
					//You must pass a Ruby code block to method to 
					//process the data of each bucket in the list
class HashTable
	(-)LinkedList table[]
	(+)LinkedList table() // getter method for array created by "attr_reader :table"
	(+)void initialize(size)
	(+)<abstract> void hash_function(key)
	(+)void insert(key,value)
	(+)String search(key)
	(+)each(&block)  //Takes code block to proccess each entry in table

class MyHash < HashTable
	(+)void initialize(size)
	(+)void read_data(filename)
	(+)void search_for_file
	(+)void write_data()
	(+)void hash_function(key)
	(+)void stats()
	(+)void print_table(state)
	(-)print_report_header(state)
	(-)print_search_header()
	(-)print_search()

Class Associations

LinkedList -------1:n(contains) ----- Bucket
HashTable -----1:n(contains) ------ LinkedList
MyHash <------- 1:1(inherits) ------ HashTable

Main Psuedocode

1. Initialize MyHash of size 20
2. Read data from datain.txt
3. Print the table
4. Write the data to output.txt
5. Read the data back in from output.txt
6. Print the table
7. Search and print the search report
8. Print the stats for the table
end

